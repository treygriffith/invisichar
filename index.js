// Generated by CoffeeScript 1.9.0
(function() {
  var Converter, Invisitrack;

  Converter = (function() {
    function Converter(_at_set) {
      this.set = _at_set;
    }

    Converter.prototype.from = function(idx, toNums) {
      if (toNums) {
        return this.set[idx];
      } else {
        return idx;
      }
    };

    Converter.prototype.to = function(idx, toNums) {
      return this.from(idx, !toNums);
    };

    Converter.prototype.toNums = function(chars) {
      return this.convert(chars, true);
    };

    Converter.prototype.toSet = function(chars) {
      return this.convert(chars);
    };

    Converter.prototype.convert = function(chars, toNums) {
      var idx, _i, _ref;
      for (idx = _i = 0, _ref = this.set.length; 0 <= _ref ? _i < _ref : _i > _ref; idx = 0 <= _ref ? ++_i : --_i) {
        chars = chars.replace(new RegExp("" + (this.from(idx, toNums)), "g"), "" + (this.to(idx, toNums)));
      }
      return chars;
    };

    return Converter;

  })();

  Invisitrack = (function() {
    function Invisitrack() {
      this.converter = new Converter(["\uFEFF", "\u200B", "\u200C", "\u200D"]);
    }

    Invisitrack.prototype.fromString = function(str) {
      var _i, _ref, _results;
      return (function() {
        _results = [];
        for (var _i = 0, _ref = str.length; 0 <= _ref ? _i < _ref : _i > _ref; 0 <= _ref ? _i++ : _i--){ _results.push(_i); }
        return _results;
      }).apply(this).map((function(_this) {
        return function(idx) {
          var charCode;
          charCode = str.charCodeAt(idx);
          return _this.converter.toSet(_this.zeroPad(charCode.toString(4), 4));
        };
      })(this)).join("");
    };

    Invisitrack.prototype.toString = function(base4) {
      return String.fromCharCode.apply(String, this.converter.toNums(base4).match(/.{1,4}/g).map(function(char) {
        return parseInt(char, 4);
      }));
    };

    Invisitrack.prototype.zeroPad = function(n, length) {
      n = n.toString();
      if (n.length === length) {
        return n;
      } else {
        return this.zeroPad("0" + n, length);
      }
    };

    return Invisitrack;

  })();

  module.exports = new Invisitrack();

  module.exports.Invisitrack = Invisitrack;

}).call(this);
